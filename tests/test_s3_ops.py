'''
Module adapted from one generated by Amazon Q to test S3 operations.
Reference indicated by AI:
    https://stackoverflow.com/questions/75902766
this reference is wrong: it uses a "mock_s3" decorator that doesn't exist any more

Make sure you have the required dependencies installed:
    pip install pytest boto3
    py -m pip install moto[s3]

Run the tests using pytest:
    pytest test_s3_ops.py -v
'''
import os
import pytest
import boto3
from moto import mock_aws
from moto.server import ThreadedMotoServer
#from pathlib import Path
from src.files.s3_ops import S3Ops
from src.config import Config
from tests.s3_util import S3Util

ENV_S3_REGION = 'us-east-1'
ENV_S3_ENDPOINT = 'http://127.0.0.1:5000'

@pytest.fixture(scope="package")
def set_aws_credentials():
    '''
    Set AWS access info for moto server
    http://docs.getmoto.org/en/latest/docs/getting_started.html#how-do-i-avoid-tests-from-mutating-my-real-infrastructure
    '''
    os.environ['AWS_ACCESS_KEY_ID'] = 'testing'
    os.environ['AWS_SECRET_ACCESS_KEY'] = 'testing'
    os.environ['AWS_SECURITY_TOKEN'] = 'testing'
    os.environ['AWS_SESSION_TOKEN'] = 'testing'
    os.environ['AWS_DEFAULT_REGION'] = 'us-east-1'
    #Mock Config for test s3_ops
    os.environ['S3_REGION'] = ENV_S3_REGION
    os.environ['S3_ENDPOINT'] = ENV_S3_ENDPOINT

# Note: pick an appropriate fixture "scope" for your use case
@pytest.fixture(scope="package")
def moto_server():
    '''Fixture to run a mocked AWS server for testing.'''
    # Note: pass `port=0` to get a random free port.
    server = ThreadedMotoServer(ip_address="127.0.0.1", port=5000, verbose=True)
    server.start()
    host, port = server.get_host_and_port()
    yield f"http://{host}:{port}"
    server.stop()
    print(f"Closed Thread with MotoServer running on {host}:{port}...")

@pytest.fixture(scope="package")
def s3_client(set_aws_credentials, moto_server):
    '''
    Return a mocked S3 client
    '''
    with mock_aws():
        # Setup code here (before "yeld" runs before the test)
        s3 = boto3.client('s3', endpoint_url=os.environ['S3_ENDPOINT'])
        util = S3Util(endpoint_url=os.environ['S3_ENDPOINT'])
        util.create_objects()
        yield s3
        # Cleanup code here (runs after the test)
        # For example, delete test buckets, files, etc.


@pytest.fixture(scope="package", autouse=True)
def get_s3_ops(s3_client):
    with mock_aws():
        cfg = Config()
        s3_ops = S3Ops(cfg)
        yield s3_ops

def test_config_read_env(set_aws_credentials):
    '''
    Test config read from environment variables
    '''
    cfg = Config()
    print(f'test_config_read_env: Environ Endpoint: {cfg.s3_endpoint}; Region: {cfg.s3_region}')
    assert cfg.s3_endpoint == ENV_S3_ENDPOINT
    assert cfg.s3_region == ENV_S3_REGION

def test_s3_using_moto_fixture(s3_client, moto_server):
    '''
    Test list bucket with standard boto3 functions
    '''
    #https://docs.getmoto.org/en/latest/docs/server_mode.html
    with mock_aws():
        client = boto3.client("s3", endpoint_url=moto_server)
        #endpoint_url=os.environ['S3_ENDPOINT'])
        buckets = client.list_buckets()
        print(f'  test_s3_using_moto_fixture Buckets: {buckets["Buckets"]}')
        assert len(buckets["Buckets"]) > 0
        assert len(buckets["Buckets"]) == 1

@mock_aws
def test_list_buckets(get_s3_ops):
    ''' Test S3Ops.list_buckets()
    '''
    s3_ops = get_s3_ops
    
    # Verify s3 connection
    assert s3_ops is not None
    assert s3_ops.s3_client is not None

    list_buckets = s3_ops.list_buckets()

    # Verify upload
    assert list_buckets["Buckets"] is not None
    assert len(list_buckets["Buckets"]) > 0

def test_list_files(get_s3_ops):
    ''' Test S3Ops.list_objects()
    '''
    s3_ops = get_s3_ops

    # Verify s3 connection
    assert s3_ops is not None
    assert s3_ops.s3_client is not None

    file_list = s3_ops.list_files("bucket1")

    print(file_list)

    # Verify upload
    assert file_list["Contents"] is not None
    assert len(file_list["Contents"]) > 0
    assert file_list["Contents"][0]["Key"] == "sample-1.txt"

def test_list_file_meta_data (set_aws_credentials, moto_server, s3_client):
    # Test S3Ops.list_objects()
    cfg = Config()
    s3_ops = S3Ops(cfg)

    # Verify s3 connection
    assert s3_ops is not None
    assert s3_ops.s3_client is not None

    file_dict = s3_ops.list_file_metadata("bucket1")

    print(file_dict)

    # Verify upload
    assert len(file_dict.values()) > 0
    assert file_dict["sample-1.txt"] is not None


if __name__ == "__main__":
    pytest.main()
